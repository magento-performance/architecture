The goal of this document is to describe how to deliver data from the Magento Monolith to the StoreFront service.

The desired state is to have Storage(s) on the SF side which should have all needed data to perform data for requested fields. (see https://github.com/magento/architecture/blob/master/design-documents/graph-ql/storefront-api.md)

We will use Catalog SF as an example.

1. How can data be added to the Storage?

Storage (in the first iteration - just an MySQL table/mongodb db) will be fullfilled by Data Providers that can fetch information by "entity_id" and "scope_id"
Data Providers will "live" on monolith side, so they can use Service Contracts to fetch the data

2. Who is repsonsible for "fullfill" storage?
Let's name it "Indexer" for now. Indexer is responsible to call Data Providers and put data to Storage.

3. How can "Indexer" know that need to add data to Storage.

There are 2 approaches to do it.
3.1. Queue framework. 
Add message to queue {"products_ids": [...], "scopes", "attributes": []} 

Pors. 
- Easier to decouple from monolith in future (in case we stop using Service Contracts in Data Providers)
- Message already contains all needed information to call Data Proivider (entity_id/scopes)

Cons.
- Need to mannualy take care about adding message to the Queue
-- create plugins/event listeners
-- "parse" default scope to several scopes (E.g. Save product in "Default" scope)


3.2. MView mechanism
We can create intermediate Magento Indexer and add listeners to all tables, that we want to take care

Pors. 
- Easier to implement

Cons.
- Message do not contains scopes. Need to call DataProviders with all scopes in system (just store?)



4. Open questions
How Storage schema should looks like?
E.g. For Catalog service. How can we handle staging ?
... TBD
